<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ggvis on </title>
    <link>/categories/ggvis/</link>
    <description>Recent content in Ggvis on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 04 Mar 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/categories/ggvis/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Beyond Rstats -&gt; Rgames</title>
      <link>/post/pong-in-r/</link>
      <pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/pong-in-r/</guid>
      <description>&lt;p&gt;While R is traditionally an academically-oriented language (usually statistics) it has moved into some kind of grey-zone due to inclusive philosophies and an abundance of new packages.&lt;/p&gt;
&lt;p&gt;Thinking about this recently, I wondered if anyone had written any interactive games in R- and the answer is “kind-of”. About 2 years ago, Shiny afficionado Dean Attali wrote an &lt;a href=&#34;https://deanattali.com/blog/shiny-game-lightsout/&#34;&gt;interactive game&lt;/a&gt;, which is interactive but still lacked dynamic movement of a piece/character, charactestic of many games.&lt;/p&gt;
&lt;p&gt;After another brief search I came across Peter Prevos’ &lt;a href=&#34;https://www.r-bloggers.com/r-cade-games-simulating-the-legendary-game-of-pong&#34;&gt;post in r-bloggers&lt;/a&gt; about pong in R. I thought that was it, my search was done! But a closer look at the title revealed that while he had “simulated” the game, he had yet to accomplish interactivity.&lt;/p&gt;
&lt;p&gt;So here’s my proof of concept, super-glitchy, 10-min of coding attempt of a truly interactive game of Pong in R, using Shiny, dplyr, and ggvis. I had extended this to a game similar to Google dino-game easter egg (eg &lt;a href=&#34;http://www.trex-game.skipser.com&#34;&gt;here&lt;/a&gt;)…but that seems to be on my other computer, or maybe I just dreamt that… so maybe another day, another post. :)&lt;/p&gt;
&lt;p&gt;Feel free to modify this code into an actual full-fledged game if you are so inclined. Peters’ &lt;a href=&#34;https://www.r-bloggers.com/r-cade-games-simulating-the-legendary-game-of-pong&#34;&gt;post&lt;/a&gt; even gives some ideas of incorporating sound and how to handle when the paddle misses/adding levels/and a “Game Over” screen.&lt;/p&gt;
&lt;p&gt;Yeah, there’s currently no winner, the ball moves slowly, it might be a bit jumpy, I probably used the wrong syntax… let’s see your best, make it better… game on!&lt;/p&gt;
&lt;p&gt;An online version can be found here: &lt;a href=&#34;https://chasemc.shinyapps.io/PONG&#34;&gt;chasemc.shinyapps.io/PONG&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Code is very loosely based on https://www.r-bloggers.com/r-cade-games-simulating-the-legendary-game-of-pong/

library(shiny)
library(ggvis)
library(dplyr)

# Playing field boundary lines
boundaries &amp;lt;- tibble(x = c(0, 50, 50, 0), y = c(0, 0, 50, 50))
paddleHeight &amp;lt;- tibble(x = c(0, 0), y = c(10, 20))

# Playing field boundaries (depend on cex)
xmin &amp;lt;- 0
xmax &amp;lt;- 50
ymin &amp;lt;- 0
ymax &amp;lt;- 50

# Initial position
initialBallPosition &amp;lt;&amp;lt;- tibble(x=40,y=40)

# Paddle control
psize &amp;lt;- 4
ypaddle &amp;lt;- 4
paddleSpeed &amp;lt;- 3

# Set direction
dx &amp;lt;- runif(1, .5, 1)
dy &amp;lt;- runif(1, .5, 1) 

ui &amp;lt;- 
  fluidPage(
    column(width=3),
    column(width=6,
           h1(&amp;quot;PONG in R: A Proof of Concept&amp;quot;),
           
           actionButton(&amp;quot;reset&amp;quot;,&amp;quot;Reset&amp;quot;),
           ggvisOutput(&amp;quot;p&amp;quot;),
           # The following code was modified based on https://stackoverflow.com/questions/24973549/r-shiny-key-input-binding
           tags$style(type=&amp;quot;text/css&amp;quot;, &amp;quot;.recalculating {opacity: 1.0;}&amp;quot;),
           tags$script(&amp;#39;$(document).on(&amp;quot;keydown&amp;quot;, function (e) {
                       Shiny.onInputChange(&amp;quot;mydata&amp;quot;, [e.which, Math.random()]  );
                       });&amp;#39;)  
    ),column(width=3)
    )

server &amp;lt;- function(input,output,session) {
  
  observeEvent(input$reset,{
  initialBallPosition &amp;lt;&amp;lt;- tibble(x=40,y=40)
  })
  
  # Update paddle position based on keyboard input  
  # Key map  
  # left  = 37
  # right = 39
  # up ter   = 38
  # down  = 40
  
  observeEvent(input$mydata,{
    if((is.null(input$mydata))){
      playerObjectInitial}else{
        if(input$mydata[1] == 37){
          # left arrow key is empty
        }else if(input$mydata[1] == 39){
          # right arrow key is empty
        }else if(input$mydata[1] == 38 &amp;amp;&amp;amp; max(paddleHeight$y) &amp;lt; ymax - paddleSpeed){
          paddleHeight &amp;lt;&amp;lt;- paddleHeight %&amp;gt;% mutate(y=y+paddleSpeed)
        }else if(input$mydata[1] == 40 &amp;amp;&amp;amp; min(paddleHeight$y) &amp;gt; ymin + paddleSpeed){
          paddleHeight &amp;lt;&amp;lt;-   paddleHeight %&amp;gt;% mutate(y=y-paddleSpeed)
        }
      }
  })
  
  paddleMove &amp;lt;- reactive({
    invalidateLater(100)
    paddleHeight
  })
  
  ballPosition &amp;lt;- reactive({
    
    invalidateLater(200)
    
    if (initialBallPosition$x &amp;gt; xmax ) {
      dx &amp;lt;&amp;lt;- -dx * runif(1, .9, 1.1) # Bounce 
      initialBallPosition &amp;lt;&amp;lt;- initialBallPosition %&amp;gt;% mutate(x = x + dx)
    }else if (initialBallPosition$y &amp;gt; ymax | initialBallPosition$y &amp;lt; ymin){
      dy &amp;lt;&amp;lt;- -dy * runif(1, .9, 1.1)
      initialBallPosition &amp;lt;&amp;lt;- initialBallPosition %&amp;gt;% mutate(y = y + dy)
    }else if((initialBallPosition$x &amp;lt; xmin+.1) &amp;amp;&amp;amp; (initialBallPosition$y &amp;gt; min(paddleHeight$y) &amp;amp;&amp;amp; initialBallPosition$y &amp;lt; max(paddleHeight$y)) ){
      dx &amp;lt;&amp;lt;- -dx * runif(1, .9, 1.1) # Bounce 
      initialBallPosition &amp;lt;&amp;lt;- initialBallPosition %&amp;gt;% mutate(x = x + dx)
    }else{
      initialBallPosition &amp;lt;- initialBallPosition %&amp;gt;% mutate(y = y + dy)
      initialBallPosition &amp;lt;- initialBallPosition %&amp;gt;% mutate(x = x + dx)
      initialBallPosition &amp;lt;&amp;lt;- initialBallPosition
    }
    
    initialBallPosition 
  })
  
  ggvis(x = ~x, y = ~y) %&amp;gt;% 
    
    layer_points(data=ballPosition,size:=100) %&amp;gt;% 
    layer_paths(data=boundaries) %&amp;gt;% 
    layer_paths(data=paddleMove, stroke := &amp;quot;red&amp;quot;,strokeWidth := 5) %&amp;gt;% 
    scale_numeric( &amp;quot;x&amp;quot;, domain = c(0,50)) %&amp;gt;% 
    scale_numeric( &amp;quot;y&amp;quot;, domain = c(0,50)) %&amp;gt;%
    hide_axis(scale = &amp;quot;x&amp;quot;) %&amp;gt;%
    hide_axis(scale = &amp;quot;y&amp;quot;) %&amp;gt;% 
    bind_shiny(&amp;quot;p&amp;quot;)
  
}

# Run the application 
shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>