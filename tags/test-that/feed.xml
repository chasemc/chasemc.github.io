<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test-that on </title>
    <link>/tags/test-that/</link>
    <description>Recent content in Test-that on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 15 May 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/test-that/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unit test renderUI inside Shiny modules</title>
      <link>/post/unit-test-renderui-inside-shiny-modules/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/unit-test-renderui-inside-shiny-modules/</guid>
      <description>&lt;p&gt;I have run across this a few times and hope this might help someone. As Shiny apps get more complicated and you start to use Shiny modules you will likely run across use cases for using renderUI within modules. Sometimes it is desirable to be able to test these using packages like testthat.&lt;/p&gt;
&lt;p&gt;However, you will run into a problem because of a missing &lt;code&gt;session$ns&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(testthat)
library(shiny)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example adapted from: &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34; class=&#34;uri&#34;&gt;https://shiny.rstudio.com/articles/modules.html&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;badExample &amp;lt;- function(session){
  selectInput(session$ns(&amp;quot;col&amp;quot;), 
              &amp;quot;Columns&amp;quot;,
              names(data),
              multiple = TRUE)
}


columnChooserUI &amp;lt;- function(id) {
  ns &amp;lt;- NS(id)
  uiOutput(ns(&amp;quot;controls&amp;quot;))
}

columnChooser &amp;lt;- function(input, output, session, data) {
  output$controls &amp;lt;- renderUI({
    badExample(session)
    
  })

  return(reactive({
    validate(need(input$col, FALSE))
    data[,input$col]
  }))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, that’s not a great example of why you would need a function, but it’ll work for this demo.&lt;/p&gt;
&lt;p&gt;So, what do we pass for session?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(
badExample(session = &amp;quot;IdontKnow&amp;quot;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in session$ns: $ operator is invalid for atomic vectors&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we can do is recreate the namespace function for testing purposes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;session &amp;lt;- NULL
session$ns &amp;lt;- function(id) {id}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should get back the html and setup whatever tests we like (for long html &lt;code&gt;testthat::expect_known_hash()&lt;/code&gt; is helpful).
(Note: &lt;code&gt;print&lt;/code&gt; included just for rendering this post.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(
badExample(session)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;div class=&amp;quot;form-group shiny-input-container&amp;quot;&amp;gt;
##   &amp;lt;label class=&amp;quot;control-label&amp;quot; for=&amp;quot;col&amp;quot;&amp;gt;Columns&amp;lt;/label&amp;gt;
##   &amp;lt;div&amp;gt;
##     &amp;lt;select id=&amp;quot;col&amp;quot; multiple=&amp;quot;multiple&amp;quot;&amp;gt;&amp;lt;/select&amp;gt;
##     &amp;lt;script type=&amp;quot;application/json&amp;quot; data-for=&amp;quot;col&amp;quot;&amp;gt;{}&amp;lt;/script&amp;gt;
##   &amp;lt;/div&amp;gt;
## &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: the object returned is not character.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(badExample(session))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;shiny.tag&amp;quot;&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>