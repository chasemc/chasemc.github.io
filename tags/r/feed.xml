<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on </title>
    <link>/tags/r/</link>
    <description>Recent content in R on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Fri, 27 Sep 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/r/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Subtleties of Shiny Reactive Programming: Lapply and For Loops</title>
      <link>/post/the-subtleties-of-shiny-reactive-programming-lapply-and-for-loops/</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/the-subtleties-of-shiny-reactive-programming-lapply-and-for-loops/</guid>
      <description>&lt;div id=&#34;why-read-this&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Why Read This?&lt;/h4&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;You want to understand why for loops can fail to produce desired results in an R Shiny app.&lt;/li&gt;
&lt;li&gt;You want an example of creating a dynamic number of plots within an R Shiny app.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;a-minimal-reproducible-example&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;A Minimal, Reproducible Example&lt;/h4&gt;
&lt;p&gt;First, let’s look at the minimal reprex. This is an R Shiny app that uses modules to display a dynamic number of plots.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plot_overlay_ui()&lt;/code&gt; is a &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Shiny module&lt;/a&gt; ui function that returns a &lt;code&gt;&amp;lt;tag&amp;gt;&lt;/code&gt; list containing our plot(s).&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;plot_overlay_server()&lt;/code&gt; is a &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Shiny module&lt;/a&gt; server function that creates the plot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ui()&lt;/code&gt; is a regular Shiny ui function that contains the code to create the main skeleton of the user interface.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;server()&lt;/code&gt; is a regular Shiny server function that contains logic to run the app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;plot_data()&lt;/code&gt; is a reactive expression that returns a list, where each list element is a vector representing a column of mtcars selected using the &lt;code&gt;checkboxGroupInput&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;multi_plot_ui&lt;/code&gt; renders ui/html that is dynamically generated… this will hold our dynamically-generated plots&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And &lt;code&gt;callModule(plot_overlay_server,...)&lt;/code&gt; is where the focus of this blog takes place.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)

plot_overlay_ui &amp;lt;- function(id) {
  ns &amp;lt;- NS(id)
  tagList(
    plotOutput(ns(&amp;quot;my_plot&amp;quot;), 
               width = &amp;quot;100%&amp;quot;)
  )
}
# -------------------------------------------------------------------------

plot_overlay_server &amp;lt;- function(input,
                                output,
                                session, 
                                spec,
                                plot_name) {
  
  output$my_plot &amp;lt;- renderPlot({
    
    plot(spec, 
         main = plot_name)
    
  })
}
# -------------------------------------------------------------------------

ui &amp;lt;- fluidPage(
  titlePanel(&amp;quot;Reprex&amp;quot;),
  sidebarLayout(
    sidebarPanel(
      checkboxGroupInput(&amp;quot;selected_sample&amp;quot;,
                         label = &amp;quot;Select Column&amp;quot;,
                         choices = seq_along(mtcars))
    ),
    mainPanel(
      uiOutput(&amp;quot;multi_plot_ui&amp;quot;)
    )
  )
)
# -------------------------------------------------------------------------

server &amp;lt;- function(input, output) {
  
  plot_data &amp;lt;- reactive({
    col_select &amp;lt;- as.integer(input$selected_sample)
    lapply(col_select, function(x) mtcars[,x])
  })
  
  observeEvent(input$selected_sample, {
    req(!is.null(input$selected_sample))
    req(plot_data())
    
    output$multi_plot_ui &amp;lt;- renderUI({
      
      lapply(seq_along(input$selected_sample),
             function(n) {
               return(plot_overlay_ui(paste0(&amp;quot;n&amp;quot;, n)))
             })
    })
    
    lapply(seq_along(input$selected_sample),
           function(i){
             callModule(plot_overlay_server,
                        paste0(&amp;quot;n&amp;quot;, i),
                        spec = plot_data()[[i]],
                        plot_name = i)
           }
    )
    
    # for (i in seq_along(input$selected_sample)) {
    #   callModule(plot_overlay_server,
    #              paste0(&amp;quot;n&amp;quot;, i),
    #              spec = plot_data()[[i]],
    #              plot_name = i)
    # }
    
  })
}

shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;lapply-vs-for-loops-in-shiny&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Lapply vs For Loops in Shiny&lt;/h3&gt;
&lt;p&gt;My original code to generate the multiple server functions to generate plots was:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# the for loop
for (i in seq_along(input$selected_sample)) {
  callModule(plot_overlay_server,
             paste0(&amp;quot;n&amp;quot;, i),
             spec = plot_data()[[i]],
             plot_name = i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this was able to produce multiple plots, all of the plots were identical and represented the plot created during the last iteration of the loop. I was convinced the problem was a regression in my Shiny abilities and that I was simply missing an &lt;code&gt;session$ns()&lt;/code&gt; or the like.&lt;/p&gt;
&lt;p&gt;After convincing myself everything was correct, I tried an experiment that I thought was crazy enough to work because of the underlying mechanics… change the for-loop to a lapply.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# the lapply
lapply(seq_along(input$selected_sample),
       function(i){
         callModule(plot_overlay_server,
                    paste0(&amp;quot;n&amp;quot;, i),
                    spec = plot_data()[[i]],
                    plot_name = i)
       }
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the lapply worked! Multiple plots representing the correct, selected data were displayed!&lt;/p&gt;
&lt;p&gt;My best guess was that for a &lt;code&gt;lapply()&lt;/code&gt; every iteration was run in its own environment. This turns out to be exactly what allows this to work, and I am honestly surprised I hadn’t encountered this before.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;learn-more&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Learn More!&lt;/h3&gt;
&lt;p&gt;If you would like to learn more, Barbara Borges Ribeiro (&lt;a href=&#34;https://github.com/bborgesr&#34; class=&#34;uri&#34;&gt;https://github.com/bborgesr&lt;/a&gt;) has a wonderful Gist explaining what is going on with for loops vs lapply in Shiny: &lt;a href=&#34;https://gist.github.com/bborgesr/e1ce7305f914f9ca762c69509dda632e&#34; class=&#34;uri&#34;&gt;https://gist.github.com/bborgesr/e1ce7305f914f9ca762c69509dda632e&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Unit test renderUI inside Shiny modules</title>
      <link>/post/unit-test-renderui-inside-shiny-modules/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/unit-test-renderui-inside-shiny-modules/</guid>
      <description>&lt;p&gt;I have run across this a few times and hope this might help someone. As Shiny apps get more complicated and you start to use Shiny modules you will likely run across use cases for using renderUI within modules. Sometimes it is desirable to be able to test these using packages like testthat.&lt;/p&gt;
&lt;p&gt;However, you will run into a problem because of a missing &lt;code&gt;session$ns&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(testthat)
library(shiny)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example adapted from: &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34; class=&#34;uri&#34;&gt;https://shiny.rstudio.com/articles/modules.html&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;badExample &amp;lt;- function(session){
  selectInput(session$ns(&amp;quot;col&amp;quot;), 
              &amp;quot;Columns&amp;quot;,
              names(data),
              multiple = TRUE)
}


columnChooserUI &amp;lt;- function(id) {
  ns &amp;lt;- NS(id)
  uiOutput(ns(&amp;quot;controls&amp;quot;))
}

columnChooser &amp;lt;- function(input, output, session, data) {
  output$controls &amp;lt;- renderUI({
    badExample(session)
    
  })

  return(reactive({
    validate(need(input$col, FALSE))
    data[,input$col]
  }))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, that’s not a great example of why you would need a function, but it’ll work for this demo.&lt;/p&gt;
&lt;p&gt;So, what do we pass for session?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(
badExample(session = &amp;quot;IdontKnow&amp;quot;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in session$ns: $ operator is invalid for atomic vectors&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we can do is recreate the namespace function for testing purposes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;session &amp;lt;- NULL
session$ns &amp;lt;- function(id) {id}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should get back the html and setup whatever tests we like (for long html &lt;code&gt;testthat::expect_known_hash()&lt;/code&gt; is helpful).
(Note: &lt;code&gt;print&lt;/code&gt; included just for rendering this post.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(
badExample(session)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;div class=&amp;quot;form-group shiny-input-container&amp;quot;&amp;gt;
##   &amp;lt;label class=&amp;quot;control-label&amp;quot; for=&amp;quot;col&amp;quot;&amp;gt;Columns&amp;lt;/label&amp;gt;
##   &amp;lt;div&amp;gt;
##     &amp;lt;select id=&amp;quot;col&amp;quot; multiple=&amp;quot;multiple&amp;quot;&amp;gt;&amp;lt;/select&amp;gt;
##     &amp;lt;script type=&amp;quot;application/json&amp;quot; data-for=&amp;quot;col&amp;quot;&amp;gt;{}&amp;lt;/script&amp;gt;
##   &amp;lt;/div&amp;gt;
## &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: the object returned is not character.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(badExample(session))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;shiny.tag&amp;quot;&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Structuring Shiny App Development</title>
      <link>/post/structuring-shiny-app-development/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/structuring-shiny-app-development/</guid>
      <description>&lt;div id=&#34;part-one-scope&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part One: Scope&lt;/h3&gt;
&lt;p&gt;This is going to be a fairly opinionated post about my &lt;strong&gt;not novel&lt;/strong&gt; but recent revelations as to how I think &lt;a href=&#34;https://shiny.rstudio.com&#34;&gt;Shiny&lt;/a&gt; apps should be formatted. By formatting I don’t mean UI formatting, code style, etc. I mean how one might organize, holistically, a Shiny app to help maximize readability, stability, and scalability. Again &lt;em&gt;not novel&lt;/em&gt;, just me getting my thoughts “on paper’.&lt;/p&gt;
&lt;p&gt;Before now my &lt;code&gt;server()&lt;/code&gt; sections kind of looked like this: &lt;img src=&#34;/img/post/2018-07-12/unorganized.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I am aware that it is possible to “modularize” a shiny app and there is good info on that from RStudio &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;here&lt;/a&gt; and Steph Locke &lt;a href=&#34;https://itsalocke.com/blog/shiny-module-design-patterns-pass-module-inputs-to-other-modules&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am not a fan of this approach for a couple of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I think it can add unnecessary complexity to small applications&lt;/li&gt;
&lt;li&gt;I think it’s difficult to use with large applications that have highly interconnected reactivity&lt;/li&gt;
&lt;li&gt;But, in reality, it’s likely I just haven’t spent enough time trying it ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;part-two-straight-to-the-point&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part Two: Straight to the Point&lt;/h3&gt;
&lt;p&gt;I think abstracting Shiny apps to small functional components is most helpful when done at the most fundamental level. Luckily there are two elements of the R ecosystem that are crazy-complementary to Shiny apps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://r-pkgs.had.co.nz/intro.html&#34;&gt;Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://adv-r.had.co.nz/Functions.html&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those links point to Hadley Wickham’s book &lt;em&gt;R packages&lt;/em&gt; and a chapter of &lt;em&gt;Advanced R&lt;/em&gt;, respectively.&lt;/p&gt;
&lt;p&gt;And if we look at the first sentence of each:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;R packages&lt;/em&gt;:&lt;br /&gt;
“In R, the fundamental unit of shareable code is the package.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Advanced R&lt;/em&gt;:&lt;br /&gt;
“Functions are a fundamental building block of R…”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;i.e. The tools you need to organize your app exist:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start by making it a package&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Then break your computation into standalone functions that reside outside the app&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;part-three-a-shiny-app-is-a-package&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part Three: A Shiny App is a Package&lt;/h3&gt;
&lt;p&gt;Making your Shiny app a package allows you to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easily distribute the app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-pkgs.had.co.nz/description.html#dependencies&#34;&gt;Manage package dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Write unit tests for your app (more on that in Part Five)&lt;/li&gt;
&lt;li&gt;Easily include any needed data within the app (eg example data, models)&lt;/li&gt;
&lt;li&gt;Organize your code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Creating an app as a package provides you a framework for development: &lt;img src=&#34;/img/post/2018-07-12/organized.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Dean Attali briefly described the basics of including a Shiny app within a package &lt;a href=&#34;https://deanattali.com/2015/04/21/r-package-shiny-app/&#34;&gt;here&lt;/a&gt;. That formed the basis for how I now write Shiny apps, along with what I’ve learned from creating Shiny apps as Windows executables using Jonathan Hill’s &lt;a href=&#34;https://github.com/ficonsulting/RInno/&#34;&gt;“RInno” package&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-four-shiny-apps-consist-of-functions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part Four: Shiny Apps Consist of Functions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Concept One: Reactive Expressions are Basically Functions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In reality it’s &lt;a href=&#34;http://adv-r.had.co.nz/Expressions.html&#34;&gt;more complicated&lt;/a&gt; but a lot of the basic components of a Shiny app (e.g. &lt;code&gt;server()&lt;/code&gt;, &lt;code&gt;reactive()&lt;/code&gt;, &lt;code&gt;observe()&lt;/code&gt;, etc.) can be thought of as functions.&lt;/p&gt;
&lt;p&gt;Imagine we have a simple app that has a slider input that represnents the number of pumpkins you sell per year, but you want the &lt;code&gt;log10&lt;/code&gt; of that number.&lt;/p&gt;
&lt;p&gt;You could make a little reactive expression that would do this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pumpkinLog &amp;lt;- reactive({
                log10(input$pumpkins)
              })&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now imagine we moved the slider input to 10 pumpkins. We then save &lt;code&gt;pumpkinLog()&lt;/code&gt; to &lt;code&gt;savedValue&lt;/code&gt; in the parent environment and close the app.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;observe(
 savedValue &amp;lt;&amp;lt;- pumpkinLog()
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What will printing &lt;code&gt;savedValue&lt;/code&gt; give us?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(savedValue)
   
  [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It gave us &lt;code&gt;1&lt;/code&gt;, the value we would expect to be returned from &lt;code&gt;log10(10)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is because, in essence, you are asking for the result of calling a reactive “function”.&lt;/p&gt;
&lt;p&gt;And, just like in base R, functions can take as arguments the result given by calling another function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Concept Two: Shiny Inputs Just Return a Value&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This concept is pretty simple, &lt;code&gt;input$...&lt;/code&gt; just stores the value of inputs. That’s phenomenally important because it means we can use &lt;code&gt;input$...&lt;/code&gt; as an argument for another function.&lt;/p&gt;
&lt;p&gt;If you don’t believe me check out below where I saved the inputs from an intermediate point within an app. And upon closing the app printed the values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myInputs &amp;lt;&amp;lt;- as.list(input)
# close app

print(myInputs)

        $`rawORreanalyze`
        [1] &amp;quot;2&amp;quot;
        
        $idbacDirectoryButton
        [1] 1
        attr(,&amp;quot;class&amp;quot;)
        [1] &amp;quot;integer&amp;quot;                &amp;quot;shinyActionButtonValue&amp;quot;
        
        $upperMass
        [1] 15000
        
        $updateIDBac
        [1] 0
        attr(,&amp;quot;class&amp;quot;)
        [1] &amp;quot;integer&amp;quot;                &amp;quot;shinyActionButtonValue&amp;quot;
        
        $lowerMass
        [1] 3000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-five-putting-it-all-together&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part Five: Putting it All Together&lt;/h3&gt;
&lt;p&gt;So now we know we can use the value from calling a &lt;code&gt;reactive(...)&lt;/code&gt; expression and the value returned by an &lt;code&gt;input$...&lt;/code&gt; as inputs to functions.&lt;/p&gt;
&lt;p&gt;That means we can do this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Saved as a seperate .r file, within R folder of package directory
# eg &amp;quot;pumpkinLogarithm.r&amp;quot;&amp;quot; would contain this:

pumpkinLogarithm &amp;lt;- function(pumpkins){
   log10(pumpkins)
}     

# Saved as a seperate .r file, within R folder of package directory
# eg &amp;quot;otherProduce.r&amp;quot;&amp;quot;  would contain this:

totalProduce &amp;lt;- function(tomatoes, apples, loggedPumpkin){
  log10(tomatoes) + log10(apples) + loggedPumpkin
}

# Within your app&amp;#39;s server function

pumpkinLog &amp;lt;- reactive({
                pumpkinLogarithm(pumpkins = input$numberOfPumpkins)
              })

groceries &amp;lt;- reactive({
               totalProduce(tomatoes = input$tomatoes,
                            apples   = input$apples,
                            pumpkins = pumpkinLog()
                            )
             })&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now you have two functions that live &lt;em&gt;outside&lt;/em&gt; the Shiny app. Your server file is more succinct, especially in regard to the variables within each &lt;code&gt;reactive&lt;/code&gt; or &lt;code&gt;observe&lt;/code&gt; chunk that may have had reactive side effects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Most importantly:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because you are writing package functions you can wield the freaking awesome power of &lt;a href=&#34;http://testthat.r-lib.org/&#34;&gt;testthat&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I realize that this only tests the internals/non-reactiveness of an app, but there are other packages to test layout/reactivity, etc. But these can be hard to keep up with large apps that don’t have a stable codebase. For that you can reference the packages below&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/shinytest&#34; class=&#34;uri&#34;&gt;https://github.com/rstudio/shinytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rpubs.com/johndharrison/13408&#34; class=&#34;uri&#34;&gt;http://rpubs.com/johndharrison/13408&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will expand this post if there’s interest but here’s an example of an app with a layout that takes at least partial example of all this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chasemc/mzEasy&#34; class=&#34;uri&#34;&gt;https://github.com/chasemc/mzEasy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Beyond Rstats -&gt; Rgames</title>
      <link>/post/pong-in-r/</link>
      <pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/pong-in-r/</guid>
      <description>&lt;p&gt;While R is traditionally an academically-oriented language (usually statistics) it has moved into some kind of grey-zone due to inclusive philosophies and an abundance of new packages.&lt;/p&gt;
&lt;p&gt;Thinking about this recently, I wondered if anyone had written any interactive games in R- and the answer is “kind-of”. About 2 years ago, Shiny afficionado Dean Attali wrote an &lt;a href=&#34;https://deanattali.com/blog/shiny-game-lightsout/&#34;&gt;interactive game&lt;/a&gt;, which is interactive but still lacked dynamic movement of a piece/character, charactestic of many games.&lt;/p&gt;
&lt;p&gt;After another brief search I came across Peter Prevos’ &lt;a href=&#34;https://www.r-bloggers.com/r-cade-games-simulating-the-legendary-game-of-pong&#34;&gt;post in r-bloggers&lt;/a&gt; about pong in R. I thought that was it, my search was done! But a closer look at the title revealed that while he had “simulated” the game, he had yet to accomplish interactivity.&lt;/p&gt;
&lt;p&gt;So here’s my proof of concept, super-glitchy, 10-min of coding attempt of a truly interactive game of Pong in R, using Shiny, dplyr, and ggvis. I had extended this to a game similar to Google dino-game easter egg (eg &lt;a href=&#34;http://www.trex-game.skipser.com&#34;&gt;here&lt;/a&gt;)…but that seems to be on my other computer, or maybe I just dreamt that… so maybe another day, another post. :)&lt;/p&gt;
&lt;p&gt;Feel free to modify this code into an actual full-fledged game if you are so inclined. Peters’ &lt;a href=&#34;https://www.r-bloggers.com/r-cade-games-simulating-the-legendary-game-of-pong&#34;&gt;post&lt;/a&gt; even gives some ideas of incorporating sound and how to handle when the paddle misses/adding levels/and a “Game Over” screen.&lt;/p&gt;
&lt;p&gt;Yeah, there’s currently no winner, the ball moves slowly, it might be a bit jumpy, I probably used the wrong syntax… let’s see your best, make it better… game on!&lt;/p&gt;
&lt;p&gt;An online version can be found here: &lt;a href=&#34;https://chasemc.shinyapps.io/PONG&#34;&gt;chasemc.shinyapps.io/PONG&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Code is very loosely based on https://www.r-bloggers.com/r-cade-games-simulating-the-legendary-game-of-pong/

library(shiny)
library(ggvis)
library(dplyr)

# Playing field boundary lines
boundaries &amp;lt;- tibble(x = c(0, 50, 50, 0), y = c(0, 0, 50, 50))
paddleHeight &amp;lt;- tibble(x = c(0, 0), y = c(10, 20))

# Playing field boundaries (depend on cex)
xmin &amp;lt;- 0
xmax &amp;lt;- 50
ymin &amp;lt;- 0
ymax &amp;lt;- 50

# Initial position
initialBallPosition &amp;lt;&amp;lt;- tibble(x=40,y=40)

# Paddle control
psize &amp;lt;- 4
ypaddle &amp;lt;- 4
paddleSpeed &amp;lt;- 3

# Set direction
dx &amp;lt;- runif(1, .5, 1)
dy &amp;lt;- runif(1, .5, 1) 

ui &amp;lt;- 
  fluidPage(
    column(width=3),
    column(width=6,
           h1(&amp;quot;PONG in R: A Proof of Concept&amp;quot;),
           
           actionButton(&amp;quot;reset&amp;quot;,&amp;quot;Reset&amp;quot;),
           ggvisOutput(&amp;quot;p&amp;quot;),
           # The following code was modified based on https://stackoverflow.com/questions/24973549/r-shiny-key-input-binding
           tags$style(type=&amp;quot;text/css&amp;quot;, &amp;quot;.recalculating {opacity: 1.0;}&amp;quot;),
           tags$script(&amp;#39;$(document).on(&amp;quot;keydown&amp;quot;, function (e) {
                       Shiny.onInputChange(&amp;quot;mydata&amp;quot;, [e.which, Math.random()]  );
                       });&amp;#39;)  
    ),column(width=3)
    )

server &amp;lt;- function(input,output,session) {
  
  observeEvent(input$reset,{
  initialBallPosition &amp;lt;&amp;lt;- tibble(x=40,y=40)
  })
  
  # Update paddle position based on keyboard input  
  # Key map  
  # left  = 37
  # right = 39
  # up ter   = 38
  # down  = 40
  
  observeEvent(input$mydata,{
    if((is.null(input$mydata))){
      playerObjectInitial}else{
        if(input$mydata[1] == 37){
          # left arrow key is empty
        }else if(input$mydata[1] == 39){
          # right arrow key is empty
        }else if(input$mydata[1] == 38 &amp;amp;&amp;amp; max(paddleHeight$y) &amp;lt; ymax - paddleSpeed){
          paddleHeight &amp;lt;&amp;lt;- paddleHeight %&amp;gt;% mutate(y=y+paddleSpeed)
        }else if(input$mydata[1] == 40 &amp;amp;&amp;amp; min(paddleHeight$y) &amp;gt; ymin + paddleSpeed){
          paddleHeight &amp;lt;&amp;lt;-   paddleHeight %&amp;gt;% mutate(y=y-paddleSpeed)
        }
      }
  })
  
  paddleMove &amp;lt;- reactive({
    invalidateLater(100)
    paddleHeight
  })
  
  ballPosition &amp;lt;- reactive({
    
    invalidateLater(200)
    
    if (initialBallPosition$x &amp;gt; xmax ) {
      dx &amp;lt;&amp;lt;- -dx * runif(1, .9, 1.1) # Bounce 
      initialBallPosition &amp;lt;&amp;lt;- initialBallPosition %&amp;gt;% mutate(x = x + dx)
    }else if (initialBallPosition$y &amp;gt; ymax | initialBallPosition$y &amp;lt; ymin){
      dy &amp;lt;&amp;lt;- -dy * runif(1, .9, 1.1)
      initialBallPosition &amp;lt;&amp;lt;- initialBallPosition %&amp;gt;% mutate(y = y + dy)
    }else if((initialBallPosition$x &amp;lt; xmin+.1) &amp;amp;&amp;amp; (initialBallPosition$y &amp;gt; min(paddleHeight$y) &amp;amp;&amp;amp; initialBallPosition$y &amp;lt; max(paddleHeight$y)) ){
      dx &amp;lt;&amp;lt;- -dx * runif(1, .9, 1.1) # Bounce 
      initialBallPosition &amp;lt;&amp;lt;- initialBallPosition %&amp;gt;% mutate(x = x + dx)
    }else{
      initialBallPosition &amp;lt;- initialBallPosition %&amp;gt;% mutate(y = y + dy)
      initialBallPosition &amp;lt;- initialBallPosition %&amp;gt;% mutate(x = x + dx)
      initialBallPosition &amp;lt;&amp;lt;- initialBallPosition
    }
    
    initialBallPosition 
  })
  
  ggvis(x = ~x, y = ~y) %&amp;gt;% 
    
    layer_points(data=ballPosition,size:=100) %&amp;gt;% 
    layer_paths(data=boundaries) %&amp;gt;% 
    layer_paths(data=paddleMove, stroke := &amp;quot;red&amp;quot;,strokeWidth := 5) %&amp;gt;% 
    scale_numeric( &amp;quot;x&amp;quot;, domain = c(0,50)) %&amp;gt;% 
    scale_numeric( &amp;quot;y&amp;quot;, domain = c(0,50)) %&amp;gt;%
    hide_axis(scale = &amp;quot;x&amp;quot;) %&amp;gt;%
    hide_axis(scale = &amp;quot;y&amp;quot;) %&amp;gt;% 
    bind_shiny(&amp;quot;p&amp;quot;)
  
}

# Run the application 
shinyApp(ui = ui, server = server)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>A Shiny New World</title>
      <link>/post/a-shiny-new-world/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/a-shiny-new-world/</guid>
      <description>&lt;p&gt;Disclaimer (and maybe dissapointment): This has no connection to Huxley’s dystopian.&lt;/p&gt;
&lt;div id=&#34;jump-to-section&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Jump to Section:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Brief Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exampleone&#34;&gt;Example Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code&#34;&gt;Code and Presentation Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#refs&#34;&gt;Resources for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;intro&#34;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I recently gave a &lt;a href=&#34;https://github.com/chasemc/Jan2018ShinyMeetupCRUG/blob/master/CRUG-Jan-2018-Presentation.pdf&#34;&gt;talk&lt;/a&gt; at a meetup in Chicago about an R Shiny app I am working on called &lt;a href=&#34;https://chasemc.github.io/IDBac&#34;&gt;IDBac&lt;/a&gt;. While there are &lt;a href=&#34;https://shiny.rstudio.com/gallery&#34;&gt;plenty of example apps&lt;/a&gt; for Shiny I also wanted to create some examples of my own for now and any future instruction. Since the meetup had some scheduled time for attendees to work in groups or on their own I thought a nice demonstration of Shiny would be an app that could interactively create groups based on a self-reported skill level.&lt;/p&gt;
&lt;p&gt;However I also wanted to include some introductory-type apps to cover a range of beginner to intermediate skill levels. So, in all, there are three suggested apps to look through, hopefully with each stepping up a degree in skill level needed for both data-wrangling and Shiny skills. Some links to tutorials and resources can be found at the end of the post.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;App One
&lt;ul&gt;
&lt;li&gt;Was borrowed from RStudio’s example gallery and should be straightforward enough to learn some of the basics of Shiny as you go through tutorials.
&lt;ul&gt;
&lt;li&gt;Skills: simple data analysis, simple clustering, simple plotting with base R&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;App Two
&lt;ul&gt;
&lt;li&gt;Is based on the GapMinder dataset and includes two static ggplots and an interactive datatable.
&lt;ul&gt;
&lt;li&gt;Skills: simple data analysis, simple plotting with ggplot&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;App Three
&lt;ul&gt;
&lt;li&gt;Is the demonstration app on splitting Meetup attendees into groups. It uses googlesheets, jsonlite to parse API responses, and some more advanced data analysis (both purrr and lapply) and building a dynamic nested HTML table in Shiny.
&lt;ul&gt;
&lt;li&gt;Skills: Parsing API and JSON, googlesheets,dplyr, purrr (map), lapply, dynamic html tags in Shiny There are some challenges/suggestions included in each of the apps.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;exampleone&#34;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;app-one-beginner-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;App One: Beginner Example&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/post/2018-01-28-a-shiny-new-world/BeginnerExample.PNG&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;I find Joe Cheng’s &lt;a href=&#34;https://shiny.rstudio.com/gallery/kmeans-example.html&#34;&gt;k-means example&lt;/a&gt; to be pretty straightforward to point out the basic features of reactivity and chose this as challenge for beginner’s to get familiar with shiny. Trying to understand what happens when you “break” certain lines of the code and why inputs, outputs, and reactives are placed where they are.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;app-two-and-three-beginnerintermediate-examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;App Two and Three: Beginner/Intermediate Examples&lt;/h2&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;app-two-plotting-gapminder-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;App Two: Plotting GapMinder Data&lt;/h3&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/post/2018-01-28-a-shiny-new-world/Beginner-Intermediate.PNG&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;This example is pretty short and simple with an interactive dataframe and two static ggplots within three separate tabPanels.&lt;/p&gt;
&lt;p&gt;There are some challenges/suggestions on the left side of the page. These include making the ggplots interactive.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;app-three-interactively-create-groups-at-a-meetup&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;App Three: Interactively Create Groups at a Meetup&lt;/h3&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/post/2018-01-28-a-shiny-new-world/MeetupParticipantGrouping.PNG&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Due to some technical difficulties with the display tech at the meetup I wasn’t able to present this app example since I was using a computer sans-R, but wanted to include it here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Imagine:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You’re organizing an Rstats workshop through Meetup.com. You have a lot of participants and want to separate them into groups based on self-reported skill levels, how would you accomplish this with Shiny?&lt;/p&gt;
&lt;p&gt;Of course there are many ways, but the simplest I thought of was to use Google Forms and connect responses to information retrieved from the Meetup.com API.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;First, you would need to setup a Google Form and send it to participants to fill out: Example Google Form &lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSeVWtyhgmZ4V1AEAJkpuMet2r0XtgJLnTDq9lbWscLRRTU_Gg/viewform?usp=pp_url&amp;amp;entry.610887169=E.g.+Jane+Doe&#34;&gt;here&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;The responses will be recorded into a Google Sheet.
&lt;ul&gt;
&lt;li&gt;For more information on using Google Sheets with R, please see Jenny Bryan and Joanna Zhao’s &lt;a href=&#34;https://rawgit.com/jennybc/googlesheets/master/vignettes/basic-usage.html&#34;&gt;tutorial.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Copy the key for the Google Sheet (eg in bold below below)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/&#34; class=&#34;uri&#34;&gt;https://docs.google.com/spreadsheets/d/&lt;/a&gt; &lt;strong&gt;1xxtw88dEKDdQ1CoeLm46FWmNt3bqPSCGp4P7LA7BNv0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Find the code snippet below within the shiny app and replace “Insert Key Here” with your key&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;responses &amp;lt;- reactive({
      surveyResponses &amp;lt;- gs_key(&amp;quot; Insert Key Here &amp;quot;)
      surveyResponses %&amp;gt;%  gs_read(ws = &amp;quot;Form Responses 1&amp;quot;)
      
  }) &lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Then create the json API GET request for your Meetup.com event. To do so you would go &lt;a href=&#34;https://secure.meetup.com/meetup_api/console/?path=/:urlname/events/:event_id/rsvps&#34;&gt;here&lt;/a&gt;, fill out the form, create the API, and copy the Signed URL that is created.
&lt;ul&gt;
&lt;li&gt;Find the code snippet below within the Shiny app and replace “Insert Signed URL Here” with your signed url.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;listFromAPI&amp;lt;-read_json(&amp;quot; Insert Signed URL Here &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;div id=&#34;code&#34;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;shiny-apps-code-and-chicago-r-user-group-presentation-slides&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shiny Apps Code and Chicago R User Group Presentation Slides&lt;/h2&gt;
&lt;p&gt;All three examples, and my presentation, are available on github at: &lt;a href=&#34;https://github.com/chasemc/Jan2018ShinyMeetupCRUG&#34;&gt;github.com/chasemc/Jan2018ShinyMeetupCRUG&lt;/a&gt; or by download as a package with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Install devtools if you haven&amp;#39;t already
# install.packages(devtools)
devtools::install_github(&amp;quot;chasemc/Jan2018ShinyMeetupCRUG&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All three apps are released under the &lt;a href=&#34;https://www.r-project.org/Licenses/MIT&#34;&gt;MIT License.&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;refs&#34;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Where to start:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://swirlstats.com&#34;&gt;swirlstats.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r4ds.had.co.nz&#34;&gt;r4ds.had.co.nz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Then move on to: &lt;a href=&#34;http://adv-r.had.co.nz&#34;&gt;adv-r.had.co.nz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Where to find answers to your questions:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackexchange.com&#34;&gt;stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.rstudio.com&#34;&gt;community.rstudio.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Web Search! (i.e. &lt;a href=&#34;https://google.com&#34;&gt;google.com&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;E.g. (search: convert list to data frame in R)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And for those new to Shiny:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A few Shiny resources:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shiny.rstudio.com/tutorial&#34;&gt;shiny.rstudio.com/tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shiny.rstudio.com/articles&#34;&gt;shiny.rstudio.com/articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shiny.rstudio.com/gallery&#34;&gt;shiny.rstudio.com/gallery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shiny.rstudio.com/gallery/widget-gallery.html&#34;&gt;shiny.rstudio.com/gallery/widget-gallery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://deanattali.com/blog/building-shiny-apps-tutorial&#34;&gt;deanattali.com/blog/building-shiny-apps-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>